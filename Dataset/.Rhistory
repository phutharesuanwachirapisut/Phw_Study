weights <- c(60,40,45,38,80)
# data frame = ตาราง
# data
df <-  data.frame(name=names, gender=genders, weight=weights);df
summary(df)
# สร้าง column ใหม่
df$height <- c(180,150,165,162,170);df
df$bmi <- weights / (heights/100)^2;df
df$age <- c(20,19,23,26,50);df
# สร้าง column ใหม่
df$height <- c(180,150,165,162,170);df
df$bmi <- weights / (height/100)^2;df
# สร้าง column ใหม่
df$height <- c(180,150,165,162,170);df
df$bmi <- weights / (height/100)^2;df
heights <- c(179,200,180,250)
# data frame = ตาราง
# data
df <-  data.frame(name=names, gender=genders, weight=weights);df
summary(df) # เป็นการหาผลสรุปทางสถิติ ของแต่ละ column
# สร้าง column ใหม่
df$height <- c(180,150,165,162,170);df
df$bmi <- weights / (heights/100)^2;df
df$age <- c(20,19,23,26,50);df
names <- c("Tom", "Kaew", "Lisa", "Jenny", "Pop")
genders <- c("M","F","F","F","M")
weights <- c(60,40,45,38,80)
# data frame = ตาราง
# data
df <-  data.frame(name=names, gender=genders, weight=weights);df
summary(df) # เป็นการหาผลสรุปทางสถิติ ของแต่ละ column
# สร้าง column ใหม่
df$height <- c(180,150,165,162,170);df
df$bmi <- weights / (heights/100)^2;df
df$age <- c(20,19,23,26,50);df
names <- c("Tom", "Kaew", "Lisa", "Jenny", "Pop")
genders <- c("M","F","F","F","M")
weights <- c(60,40,45,38,80)
# data frame = ตาราง
# data
df <-  data.frame(name=names, gender=genders, weight=weights);df
summary(df) # เป็นการหาผลสรุปทางสถิติ ของแต่ละ column
# สร้าง column ใหม่
df$height <- c(180,150,165,162,170);df
df$bmi <- weights / (heights/100)^2;df
df$age <- c(20,19,23,26,50);df
names <- c("Tom", "Kaew", "Lisa", "Jenny", "Pop")
genders <- c("M","F","F","F","M")
weights <- c(60,40,45,38,80)
# data frame = ตาราง
# data
df <-  data.frame(name=names, gender=genders, weight=weights);df
summary(df) # เป็นการหาผลสรุปทางสถิติ ของแต่ละ column
# สร้าง column ใหม่
df$height <- c(180,150,165,162,170);df
df$bmi <- weights / (heights/100)^2;df
df$age <- c(20,19,23,26,50);df
# remove column
df$name <- NULL;df
df$name <- name;df
names <- c("Tom", "Kaew", "Lisa", "Jenny", "Pop")
df$name <- name;df
df$name <- names;df
# Order
df1 <- df[order(df$height,decreasing = F),];df1 # เรียงจาก height มากไปน้อย
df2 <- df[order(df$height,decreasing = T),];df2 # เรียงจาก height น้อยไปมาก
df[order(df$name, asc=T,)]
df[order(df$name, DESC=T,)]
df[order(df$name, DESC=T,)]
df[order(df$name, increasing=T,)]
df[order(df$name, decreasing=T,)]
df[order(df$gender, decreasing=T,)]
df[order(df$weights, decreasing=T,)]
df[order(df$weight, decreasing=T,)]
df[order(df$weight, decreasing=T,)]
df3 <- df[order(df$weight, decreasing=T,)]; df3
df[order(df$weight, decreasing=T),]
df[order(df$name, decreasing=T),]
df[order(df$name, decreasing=T)]
,
df[order(df$name, decreasing=T),]
df[order(df$name, decreasing=T)]
,
df[order(df$name, decreasing=T),]
filtered2 <- df[df$gender == "M",c("name","height")];filtered2 # หมายความว่าจะส่งค่ากลับมาแค่ column name and height และส่งค่ากลับมาเฉพาะ gender = "M"
filtered2 <- df[df$gender == "M",c("name","height")];filtered2 # หมายความว่าจะส่งค่ากลับมาแค่ column name and height และส่งค่ากลับมาเฉพาะ gender = "M"
filtered3 <- df[df$bmi < 20 | df$bmi > 24,c("name","height","bmi")];filtered3 # | = or
filtered3 <- df[df$bmi < 20 | df$bmi > 24,c("name","height","bmi")];filtered3 # | = or
# Order
df1 <- df[order(df$height,decreasing = F)];df1 # เรียงจาก height มากไปน้อย
,
# Order
df1 <- df[order(df$height,decreasing = F),];df1 # เรียงจาก height มากไปน้อย
# Order
df1 <- df[order(df$height,decreasing = F)];df1 # เรียงจาก height มากไปน้อย
# Order
df1 <- df[order(df$height,decreasing = F),];df1 # เรียงจาก height มากไปน้อย
# Filter
filtered <- df[df$gender == "M",];filtered
filtered2 <- df[df$gender == "M",c("name","height")];filtered2 # หมายความว่าจะส่งค่ากลับมาแค่ column name and height และส่งค่ากลับมาเฉพาะ gender = "M"
filtered3 <- df[df$bmi < 20 | df$bmi > 24,c("name","height","bmi")];filtered3 # | = or
# Filter
filtered <- df[df$gender == "M",];filtered
# Filter
filtered <- df[df$gender == "M",];filtered
# Filter
# df[condition, vector]
filtered <- df[df$gender == "M",];filtered
filtered2 <- df[df$gender == "M",c("name","height")];filtered2 # หมายความว่าจะส่งค่ากลับมาแค่ column name and height และส่งค่ากลับมาเฉพาะ gender = "M"
filtered2 <- df[df$gender == "M",c("name","height")];filtered2 # หมายความว่าจะส่งค่ากลับมาแค่ column name and height และส่งค่ากลับมาเฉพาะ gender = "M"
filtered3 <- df[df$bmi < 20 or df$bmi > 24,c("name","height","bmi")];filtered3 # | = or
filtered3 <- df[df$bmi < 20 | df$bmi > 24,c("name","height","bmi")];filtered3 # | = or
# Order
# df[order(df$column, decreasing=T or F),]
df1 <- df[order(df$height,decreasing = F),];df1 # เรียงจาก height มากไปน้อย
df5 <- read.csv(file="demo1.csv");df5
# ctrl + L = clear console
name <- c("Tom", "Kaew", "Lisa", "Jenny", "Pop")
genders <- c("M","F","F","F","M")
weights <- c(60,40,45,38,80)
heights <- c(180,150,165,162,170)
mean(weights)
min(weights)
max(weights)
range(weights) # แสดง min and max
plot(weights,heights) # Edward Box
barplot(weights,heights) # Edward Box
plot(weights,heights) # Edward Box
bmis <- weights / (heights/100)^2;bmis
summary(weights) # สรุป min median high frequency mean max
summart(bmis)
summary(bmis)
table(genders) # Show frequency
h <- c(2,7,5,3)
w <-c(4,2,6,5)
# เป็นการจับคู่ให้แสดงค่าออกมาเป็น string โดยใช้ sep="string"
a <- paste(h,w,sep="x");a
# เป็นการจับคู่ให้แสดงค่าออกมาเป็น string โดยใช้ sep="string"
a <- paste(h,w,sep="x");a
b <- sprintf("%dx%d",h,w);b
# เป็นการ output value โดยใช้ %d แทนค่า vector แรก และ %d อีกตัวแทน vector อีกตัว สังเกตว่าจะมี x กั้น โดยเป็นการ insert string between 2 values
b <- sprintf("%dx%d",h,w);b
a==b
# เชื่อมทุกตัวที่ถูกจับคู่โดยใช้ collapse="string"
ac <- paste(h,w,sep="x",collapse=",");ac
d <- data.frame(h,w);View(d)
# เชื่อมทุกตัวที่ถูกจับคู่โดยใช้ collapse="string"
ac <- paste(h,w,sep="x",collapse=",");ac
# เชื่อมทุกตัวที่ถูกจับคู่โดยใช้ collapse="string"
ac <- paste(h,w,sep="x",collapse=",");ac
w <-c(4,2,6,5)
h <- c(2,7,5,3)
source("~/Programming/R/Basic_R_Programming/EP.5_past_and_concatenate.R")
h <- c(2,7,5,3)
w <-c(4,2,6,5)
source("~/Programming/R/Basic_R_Programming/EP.5_past_and_concatenate.R", echo=TRUE)
# เป็นการจับคู่ให้แสดงค่าออกมาเป็น string โดยใช้ sep="string"
a <- paste(h,w,sep="x");a
# เป็นการ output value โดยใช้ %d แทนค่า vector แรก และ %d อีกตัวแทน vector อีกตัว สังเกตว่าจะมี x กั้น โดยเป็นการ insert string between 2 values
b <- sprintf("%dx%d",h,w);b
# a, b can get the same solution
a==b
# เชื่อมทุกตัวที่ถูกจับคู่โดยใช้ collapse="string"
ac <- paste(h,w,sep="x",collapse=",");ac
d <- data.frame(h,w);View(d)
# เพิ่ม column ที่ชื่อว่า dimention
d$dimention <- with(d,paste(h,w,sep="x"));View(d)
# เป็นการจับคู่ให้แสดงค่าออกมาเป็น string โดยใช้ sep="string"
a <- paste(h,w,sep="x");a
# เชื่อมทุกตัวที่ถูกจับคู่โดยใช้ collapse="string"
ac <- paste(h,w,sep="x",collapse=",");ac
d <- data.frame(h,w);View(d)
# เพิ่ม column ที่ชื่อว่า dimention
d$dimention <- with(d,paste(h,w,sep="x"));View(d)
# เพิ่ม column ที่ชื่อว่า dimention
d$dimention <- with(d,paste(h,w,sep="x"));View(d)
d$test <- with(d); View(d)
d$test <- with(d,h+w); View(d)
# สุ่มเลข 0 กับ 1 จำนวน 20 ครั้ง
paste(sample(0:1, 20, replace=T),collapse = "")
# สุ่มเลข 0 กับ 1 จำนวน 20 ครั้ง
paste(sample(0:1, 20, replace=T),collapse = ",")
LETTERS # แสดงตัวอักษรภาษาอังกฤษทั้งหมด(ตัวพิมพ์ใหญ่)
paste(LETTERS,collapse="")
paste(letters,collapse="<") # แสดงตัวอักษรภาษาอังกฤษทั้งหมด(ตัวพิมพ์เล็ก) และเชื่อมกันด้วย collapse
paste(letters[3:10],collapse=" -> ")
paste(sample(12.3:444,12,replace=T), collapse = "mm")
paste(sample(12.3:444,12,replace=T), collapse = ", ")
paste(letters[3:10],collapse=" -> ")
paste(LETTERS,collapse=", ")
for (i in 1:5) {
print(
paste(
sample(LETTERS,
sample(5:8),
replace = T),
collapse = ""))
}
print(
paste(
sample(letters,
sample(5:8),
replace = T),
collapse = ""))
print(
paste(
sample(
sample(5:8),
replace = T),
collapse = ""))
print(
paste(
sample(
sample(5:8),
replace = T),
collapse = ","))
print(
paste(
letters(
sample(5:8),
replace = T),
collapse = ","))
print(
paste(
sample(
sample(5:8),
replace = T),
collapse = ","))
print(
paste(
sample(
letters[12:15],
replace=T
),
collapse = ","
)
)
print(
paste(
sample(
letters[1:15],
replace=T
),
collapse = ","
)
)
for (i in 1:5) {
print(
paste(
sample(c(LETTERS, letters, 0:9, unlist(strsplite("+-*/.,;:",""))),
sample(5:8),
replace = T),
collapse = ""))
}
print(
paste(
sample(c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
sample(5:8),
replace = T),
collapse = ""))
print(
paste(
sample(c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
sample(1:8),
replace = T),
collapse = ""))
print(
paste(
sample(c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
sample(1:8),
replace = T),
collapse = ", "))
print(
paste(
sample(
c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
sample(1:8),
replace = T),
collapse = ", "))
print(
paste(
sample(
c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
replace = T),
collapse = ", "))
print(
paste(
sample(
c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
replace = T),
collapse = ""))
for (i in 1:5) {
print(
paste(
sample(
c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
replace = T),
collapse = ""))
}
for (i in 1:1) {
print(
paste(
sample(
c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
replace = T),
collapse = ""))
}
for (i in 1:5) {
print(
paste(
sample(
sample(5:8),
replace = T),
collapse = ","))
}
for i in 1:12 {
for (i in 1:12) {
print(
paste(
sample(letters[1:15],replace=T),
collapse = ","
)
)
}
for (i in 1:1) {
print(
paste(
sample(
c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
replace = T),
collapse = ""))
}
for (i in 1:5) {
print(
paste(
sample(
sample(5:8),
replace = T),
collapse = ","))
}
for (i in 1:12) {
print(
paste(
sample(letters[1:15],replace=T),
collapse = ","
)
)
}
for (i in 1:1) {
print(
paste(
sample(
c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
replace = T),
collapse = ""))
}
print(
paste(
sample(
LETTERS
),collapse = ","
)
)
for (i in 1:5) {
print(
paste(
sample(
LETTERS
),collapse = ","
)
)
}
for (i in 1:1) {
print(
paste(
sample( # สุ่มจากในวงเล็บ
c(LETTERS, letters, 0:9, unlist(strsplit("+-*/.,;:",""))
),
replace = T),
collapse = ""))
}
print(
paste(
sample(
LETTERS
),collapse = ","
)
)
for (i in 1:5) {
print(
paste(
sample(
LETTERS
),collapse = ","
)
)
}
print(
paste(
sample(
LETTERS[1:5]
),collapse = ","
)
)
for (i in 1:5) {
print(
paste(
sample(
LETTERS[1:5]
),collapse = ","
)
)
}
# read data frame
getwd() # ดูว่าเราอยู่ Path ไหน
# read data frame
getwd() # ดูว่าเราอยู่ Path ไหน
setwd("/Users/phutharesuanwachirapisut/Programming/R/Dataset") # set Path ใหม่ให้อยู่ในตำแหน่งเดียวกัน กับไฟล์ csv ที่เราจะ import
setwd("/Users/phutharesuanwachirapisut/Programming/R") # set Path ใหม่ให้อยู่ในตำแหน่งเดียวกัน กับไฟล์ csv ที่เราจะ import
setwd("/Users/phutharesuanwachirapisut/Programming/R/Basic_Programming") # set Path ใหม่ให้อยู่ในตำแหน่งเดียวกัน กับไฟล์ csv ที่เราจะ import
setwd("/Users/phutharesuanwachirapisut/Programming/R/R_Basic_Programming") # set Path ใหม่ให้อยู่ในตำแหน่งเดียวกัน กับไฟล์ csv ที่เราจะ import
setwd("/Users/phutharesuanwachirapisut/Programming/R/Basic_R_Programming") # set Path ใหม่ให้อยู่ในตำแหน่งเดียวกัน กับไฟล์ csv ที่เราจะ import
# read data frame
getwd() # ดูว่าเราอยู่ Path ไหน
d <- read.csv(file='sales.csv');d
setwd("/Users/phutharesuanwachirapisut/Programming/Dataset") # set Path ใหม่ให้อยู่ในตำแหน่งเดียวกัน กับไฟล์ csv ที่เราจะ import
d <- read.csv(file='sales.csv');d
hist(d$age) # histrogram ของ column age
# แปลง menu เป็นความถี่และใส่ใน menu.F โดยใช้ function factor()
d$menu.F <- factor(d$menu)
plot(d$menu.F)
# แปลง menu เป็นความถี่และใส่ใน menu.F โดยใช้ function factor()
d$menu.F <- factor(d$menu)
plot(d$menu.F)
# แปลง menu เป็นความถี่และใส่ใน menu.F โดยใช้ function factor()
d$menu.F <- factor(d$menu);View(d)
# แปลง menu เป็นความถี่และใส่ใน menu.F โดยใช้ function factor()
d$menu.F <- factor(d$menu);View(d)
plot(d$menu.F)
plot(d$menu)
plot(d$menu.F)
# แสดงตัวเลขบอกลำดับตัวอักษร
head(d$menu.F)
levels(d$menu.F)
as.numeric((head(d$menu.F))) # เป็นการแปลงข้อมูลเป็น Factor เช่น black latte mocha soda tea water จะได้ 5 1 2 4 5 4 ซึ่งเป็นการแสดงลำดับอ้างอิงตามตัวอักษร
as.numeric((head(d$menu.F))) # เป็นการแปลงข้อมูลเป็น Factor เช่น black latte mocha soda tea water จะได้ 5 1 2 4 5 4 ซึ่งเป็นการแสดงลำดับอ้างอิงตามตัวอักษร
d$size.F <- factor(d$size)
head(d$size.F)
as.numeric((head(d$size.F)))
as.numeric((head(d$menu.F))) # เป็นการแปลงข้อมูลเป็น Factor เช่น black latte mocha soda tea water จะได้ 5 1 2 4 5 4 ซึ่งเป็นการแสดงลำดับอ้างอิงตามตัวอักษร
d$size.F <- factor(d$size)
head(d$size.F)
as.numeric((head(d$size.F)))
d$weekday.F <- factor(d$weekday, levels = c("Sun","Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))
plot(d$weekday.F)
d$weekday.F <- factor(d$weekday, levels = c("Sun","Mon", "Tue", "Wed", "Thu", "Fri", "Sat"));View(d)
plot(d$weekday.F)
head(d$weekday.F)
# Factor to Charactor
d$gender.F <- factor(d$gender, label = c("female","male")) # gender 0 = female, 1 = male
# Factor to Charactor
d$gender.F <- factor(d$gender, label = c("female","male"));View(d) # gender 0 = female, 1 = male
hist(d$age)
d$weekday.F <- factor(d$weekday, levels = c(1,2,3,4,5,6,7));View(d)
d$weekday.F <- factor(d$weekday, levels = c("Sun","Mon", "Tue", "Wed", "Thu", "Fri", "Sat"));View(d)
d$weekday.F <- factor(d$weekday, levels = c("Sun","Mon", "Tue", "Wed", "Thu", "Fri", "Sat"));View(d)
plot(d$weekday.F)
head(d$weekday.F)
# Factor to Charactor
d$gender.F <- factor(d$gender, label = c("female","male"));View(d) # gender 0 = female, 1 = male
hist(d$age)
# เป็นการสร้าง Condition
d$age.group <- cut(
d$age, breaks = c(0,18,19,25,60,Inf),
labels = c("kid","teenager","young adult","adult","senior")
)
# เป็นการสร้าง Condition
d$age.group <- cut(
d$age, breaks = c(0,18,19,25,60,Inf),
labels = c("kid","teenager","young adult","adult","senior")
)
plot(d$age.group)
# เป็นการสร้าง Condition
d$age.group <- cut(
d$age, breaks = c(0,18,19,25,60,Inf),
labels = c("kid","teenager","young adult","adult","senior")
);d
# เป็นการสร้าง Condition
d$age.group <- cut(
d$age, breaks = c(0,18,19,25,60,Inf),
labels = c("kid","teenager","young adult","adult","senior")
);View(d)
# เป็นการสร้าง Condition
d$age.group <- cut(
d$age, breaks = c(0,18,19,25,60,Inf), # 0 - 18 -> kid, 18 - 19 -> teenager
labels = c("kid","teenager","young adult","adult","senior")
);View(d)
plot(d$age.group)
# อ้างถึง factor levels # ทวนนๆ
d1 <- subset(d,age.group == "teenager"|age.group == "young adult")
View(d1)
plot(d1$age.group)
